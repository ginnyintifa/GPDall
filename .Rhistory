grab_number = grab_number)
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"),
quote = F, row.names = F, sep = "\t")
if(nrow(map_result)>0)
{
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"),
quote = F, row.names = F, sep = "\t")
return(mat_df)
}else{
cat("No variants mapped.","\n")
}
}
mapVCFtoProtUnits = function(vcf_file,
protMappedGeno_file,
vcfMapped_prot_outputName,
vcfMapped_protUnitCount_outputName)
{
# vcf_file = filenames[x]
# protMappedGeno_file = mapTo_fileName
# vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
#                                    pb,"_", "mapToProt.tsv")
# vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
#                                             pb,"_", "mapToProtCount.tsv")
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
p_g = fread(protMappedGeno_file, stringsAsFactors = F, data.table = F)
matched = rbindlist(lapply(1:nrow(vcf), function(x) {
#cat(x, "\n")
this_chrom = gsub("chr","", vcf$CHROM[x])
this_pos = vcf$POS[x]
this_uid = vcf$uid[x]
get_p_g =  p_g%>%
dplyr::filter(CHROM == this_chrom)%>%
dplyr::filter(gstart <= this_pos, gend >= this_pos)
if(nrow(get_p_g)>0)
{
p_g_info = get_p_g%>%
dplyr::mutate(prot_info = paste(uniprot_accession, gene_name, start_position, end_position, unit_name, unit_label, sep = "_"),
geno_info = paste(CHROM, gstart, gend, strand, sep = "_"),
ori_mut = rep(this_uid, nrow(get_p_g)))%>%
dplyr::select(prot_info, geno_info, ori_mut)
this_df = cbind(p_g_info, vcf[rep(x, nrow(p_g_info)),])
return(this_df)
}
}),use.names=TRUE)
write.table(matched, vcfMapped_prot_outputName,
quote = F, row.names = F, sep = "\t")
cat("protein units mapped to genome. ","\n")
if(nrow(matched)>0)
{
matched_count = matched%>%
dplyr::select(-geno_info)%>%
dplyr::select(-POS)%>%
dplyr::select(-ori_mut)%>%
unique()%>%
dplyr::group_by(prot_info)%>%
dplyr::mutate(count = n())
write.table(matched_count, vcfMapped_protUnitCount_outputName,
quote = F, row.names = F, sep = "\t")
return(matched_count)
}
}
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_20211222/",
grab_start_string = "TCGA",
grab_sep = "-",
grab_number = 7,
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Google Drive/GPDall/mapped_ptm_pfam_combine_ENSGcollapse.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_result_20211221/",
output_tag = "test_protUnits")
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_20211222/",
grab_start_string = "TCGA",
grab_sep = "-",
grab_number = 7,
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Google Drive/GPDall/mapped_ptm_pfam_combine_ENSGcollapse.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_result_20211222/",
output_tag = "test_protUnits")
mapVCFtoProtUnits = function(vcf_file,
protMappedGeno_file,
vcfMapped_prot_outputName,
vcfMapped_protUnitCount_outputName)
{
# vcf_file = filenames[x]
# protMappedGeno_file = mapTo_fileName
# vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
#                                    pb,"_", "mapToProt.tsv")
# vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
#                                             pb,"_", "mapToProtCount.tsv")
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
p_g = fread(protMappedGeno_file, stringsAsFactors = F, data.table = F)
matched = rbindlist(lapply(1:nrow(vcf), function(x) {
#cat(x, "\n")
this_chrom = gsub("chr","", vcf$CHROM[x])
this_pos = vcf$POS[x]
if("uid" %in% colnames(vcf))
{
this_uid = vcf$uid[x]
}else{
this_uid = x
}
get_p_g =  p_g%>%
dplyr::filter(CHROM == this_chrom)%>%
dplyr::filter(gstart <= this_pos, gend >= this_pos)
if(nrow(get_p_g)>0)
{
p_g_info = get_p_g%>%
dplyr::mutate(prot_info = paste(uniprot_accession, gene_name, start_position, end_position, unit_name, unit_label, sep = "_"),
geno_info = paste(CHROM, gstart, gend, strand, sep = "_"),
ori_mut = rep(this_uid, nrow(get_p_g)))%>%
dplyr::select(prot_info, geno_info, ori_mut)
this_df = cbind(p_g_info, vcf[rep(x, nrow(p_g_info)),])
return(this_df)
}
}),use.names=TRUE)
write.table(matched, vcfMapped_prot_outputName,
quote = F, row.names = F, sep = "\t")
cat("protein units mapped to genome. ","\n")
if(nrow(matched)>0)
{
matched_count = matched%>%
dplyr::select(-geno_info)%>%
dplyr::select(-POS)%>%
# dplyr::select(-ori_mut)%>%
unique()%>%
dplyr::group_by(prot_info)%>%
dplyr::summarise(count = n())
write.table(matched_count, vcfMapped_protUnitCount_outputName,
quote = F, row.names = F, sep = "\t")
return(matched_count)
}
}
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_20211222/",
grab_start_string = "TCGA",
grab_sep = "-",
grab_number = 7,
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Google Drive/GPDall/mapped_ptm_pfam_combine_ENSGcollapse.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_result_20211222_2/",
output_tag = "test_protUnits")
a = c("r,"t","t","y"")
a = c("r,"t","t","y")
a
a = c("r","t","t","y")
a
b = c("r","t","y","n","m")
match(a, b)
mapVCFtoProtUnits = function(vcf_file,
protMappedGeno_file,
vcfMapped_prot_outputName,
vcfMapped_protUnitCount_outputName)
{
# vcf_file = filenames[x]
# protMappedGeno_file = mapTo_fileName
# vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
#                                    pb,"_", "mapToProt.tsv")
# vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
#                                             pb,"_", "mapToProtCount.tsv")
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
p_g = fread(protMappedGeno_file, stringsAsFactors = F, data.table = F)
matched = rbindlist(lapply(1:nrow(vcf), function(x) {
#cat(x, "\n")
this_chrom = gsub("chr","", vcf$CHROM[x])
this_pos = vcf$POS[x]
if("uid" %in% colnames(vcf))
{
this_uid = vcf$uid[x]
}else{
this_uid = x
}
get_p_g =  p_g%>%
dplyr::filter(CHROM == this_chrom)%>%
dplyr::filter(gstart <= this_pos, gend >= this_pos)
if(nrow(get_p_g)>0)
{
p_g_info = get_p_g%>%
dplyr::mutate(prot_info = paste(uniprot_accession, gene_name, start_position, end_position, unit_name, unit_label, sep = "_"),
geno_info = paste(CHROM, gstart, gend, strand, sep = "_"),
ori_mut = rep(this_uid, nrow(get_p_g)))%>%
dplyr::select(prot_info, geno_info, ori_mut)
this_df = cbind(p_g_info, vcf[rep(x, nrow(p_g_info)),])
return(this_df)
}
}),use.names=TRUE)
write.table(matched, vcfMapped_prot_outputName,
quote = F, row.names = F, sep = "\t")
cat("protein units mapped to genome. ","\n")
if(nrow(matched)>0)
{
matched_count = matched%>%
dplyr::select(-geno_info)%>%
dplyr::select(-POS)%>%
# dplyr::select(-ori_mut)%>%
unique()%>%
dplyr::group_by(prot_info)%>%
dplyr::mutate(count = n())
write.table(matched_count, vcfMapped_protUnitCount_outputName,
quote = F, row.names = F, sep = "\t")
return(matched_count)
}
}
gpd_workflow = function(vcf_folderPath,
grab_start_string = NULL,
grab_sep = NULL,
grab_number = NULL,
mapping_vcf_to,
mapTo_fileName,
gtf_df,
reg_fileName,
ud_fileName,
output_folderPath,
output_tag
)
{
# vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_20211222/"
# grab_start_string = "TCGA"
# grab_sep = "-"
# grab_number = 7
# mapping_vcf_to = "protUnits"
# mapTo_fileName = "/Users/ginny/Google Drive/GPDall/mapped_ptm_pfam_combine_ENSGcollapse.tsv"
# gtf_df = parse_gtf
# reg_fileName = NULL
# ud_fileName = NULL
# output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_result_20211221/"
# output_tag = "test_protUnits"
files = list.files(vcf_folderPath)
filenames = paste(vcf_folderPath, files, sep = "")
map_result = NULL
##################################################################
######################################################### MAP TO PROTEIN UNITS
##################################################################
if(mapping_vcf_to == "protUnits")
{
# x = 1
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
protMappedGeno_file = mapTo_fileName,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else
{
##################################################################
######################################################### MAP TO GTF file
##################################################################
if(mapping_vcf_to == "GTF")
{
gtf_df = gtf_df
#### a series of operations
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"),
quote = F, row.names = F, sep = "\t")
if(nrow(map_result)>0)
{
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x],
grab_start_string = grab_start_string,
grab_sep = grab_sep,
grab_number = grab_number)))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)%>%
dplyr::select(unit_info, count)%>%
unique()
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"),
quote = F, row.names = F, sep = "\t")
return(mat_df)
}else{
cat("No variants mapped.","\n")
}
}
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_20211222/",
grab_start_string = "TCGA",
grab_sep = "-",
grab_number = 7,
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Google Drive/GPDall/mapped_ptm_pfam_combine_ENSGcollapse.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_gbm_result_20211222/",
output_tag = "test_protUnits")
mat
setwd("/Users/ginny/Google Drive/GPDall/GPDall")
document()
library(roxygen2)
library(devtools)
setwd("/Users/ginny/Google Drive/GPDall/GPDall")
document()
detach("package:GPDall", unload=TRUE)
remove.packages("GPDall")
setwd("/Users/ginny/Google Drive/GPDall/GPDall")
document()
rm(gpd_workflow())
