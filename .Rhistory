##################################################################
######################################################### MAP TO PROTEIN UNITS
##################################################################
if(mapping_vcf_to == "protUnits")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
genoMapped = T,
protMappedGeno_file = mapTo_fileName,
protUnit_file= NULL,
protMappedGeno_outputName = NULL,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else
{
##################################################################
######################################################### MAP TO GTF file
##################################################################
if(mapping_vcf_to == "GTF")
{
gtf_df = fread(gtf_fileName, stringsAsFactors = F, data.table = F)
#### a series of operations
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"))
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x])))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"))
return(mat_df)
}
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "GTF",
mapTo_fileName = NULL,
gtf_fileName = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/parse_gtf.tsv",
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210724/",
output_tag = "test0728_gtf")
library(doParallel)
library(foreach)
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "GTF",
mapTo_fileName = NULL,
gtf_fileName = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/parse_gtf.tsv",
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210724/",
output_tag = "test0728_gtf")
mat
dim(mat)
mat[1,]
mat[2,]
mat[3,]
mat$unit_info
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "regulatory",
mapTo_fileName = NULL,
gtf_fileName = NULL,
reg_fileName = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/gtf_border_region1000.tsv",
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210724/",
output_tag = "test0728_reg")
match_reg = function(x,vcf,reg)
{
this_chro = vcf$CHROM[x]
this_pos = vcf$POS[x]
fil_reg_up =reg%>%
dplyr::filter(CHRO == this_chro & (up_start <= this_pos & TSS >= this_pos))%>%
dplyr::mutate(reg_spec = "upstreamTSS")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg_down =reg%>%
dplyr::filter(CHRO == this_chro & (TES <= this_pos & down_end >= this_pos))%>%
dplyr::mutate(reg_spec = "downstreamTES")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg = rbind(fil_reg_up, fil_reg_down)%>%
dplyr::select(vcf_chro, vcf_pos, everything())
##### parse this portion only
return(fil_reg)
}
vcf_file = "/Users/Ginny/Downloads/98112f79-4021-411e-b982-8a1b3ab9cff1/98112f79-4021-411e-b982-8a1b3ab9cff1.vcf"
reg_file = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/gtf_border_region1000.tsv"
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
reg =  fread(reg_file,
stringsAsFactors = F, data.table = F)
vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/"
files = list.files(vcf_folderPath)
filenames = paste(vcf_folderPath, files, sep = "")
map_result = NULL
filenames[1]
#
vcf_file ="/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/0a5aac29-c802-4d26-9924-025eda31f9d7.vcf"
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
reg =  fread(reg_file,
stringsAsFactors = F, data.table = F)
this_chro = vcf$CHROM[x]
this_pos = vcf$POS[x]
fil_reg_up =reg%>%
dplyr::filter(CHRO == this_chro & (up_start <= this_pos & TSS >= this_pos))%>%
dplyr::mutate(reg_spec = "upstreamTSS")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg_down =reg%>%
dplyr::filter(CHRO == this_chro & (TES <= this_pos & down_end >= this_pos))%>%
dplyr::mutate(reg_spec = "downstreamTES")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg = rbind(fil_reg_up, fil_reg_down)%>%
dplyr::select(vcf_chro, vcf_pos, everything())
fil_reg
dim(fil_reg)
paste0("","_","")
it = paste0("","_","")
nchar(it)
mapVCFtoReg = function(vcf_file,
reg_file,
vcfMapped_reg_outputName,
vcfMapped_regCount_outputName)
{
#
# vcf_file ="/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/0a5aac29-c802-4d26-9924-025eda31f9d7.vcf"
# reg_file = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/gtf_border_region1000.tsv"
# # vcfMapped_reg_outputName = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/mappted_reg.tsv"
# vcfMapped_regCount_outputName = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/mappted_reg_counts.tsv"
#
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
reg =  fread(reg_file,
stringsAsFactors = F, data.table = F)
match_reg = function(x,vcf,reg)
{
this_chro = vcf$CHROM[x]
this_pos = vcf$POS[x]
fil_reg_up =reg%>%
dplyr::filter(CHRO == this_chro & (up_start <= this_pos & TSS >= this_pos))%>%
dplyr::mutate(reg_spec = "upstreamTSS")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg_down =reg%>%
dplyr::filter(CHRO == this_chro & (TES <= this_pos & down_end >= this_pos))%>%
dplyr::mutate(reg_spec = "downstreamTES")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg = rbind(fil_reg_up, fil_reg_down)%>%
dplyr::select(vcf_chro, vcf_pos, everything())
##### parse this portion only
if(nrow(fil_reg)>0)
{
fil_reg = fil_reg
}else{
fil_reg = data.frame(vcf_chro = this_chro,
vcf_pos = this_pos,
gene_name = "",
gene_id = "",
CHRO = "",
STRAND = "",
TSS = "",
TES = "",
up_start = "",
down_end = "",
reg_spec = "",
stringsAsFactors = F)
}
return(fil_reg)
}
#
# d_gtf = rbindlist(lapply(1:nrow(vcf), function(x) {
#
#   this_chro = vcf$CHROM[x]
#   this_pos = vcf$POS[x]
#
#   fil_reg_up =reg%>%
#     dplyr::filter(CHRO == this_chro & (up_start <= this_pos & TSS >= this_pos))%>%
#     dplyr::mutate(reg_spec = "upstreamTSS")%>%
#     dplyr::mutate(vcf_chro = this_chro,
#                   vcf_pos = this_pos)
#
#   fil_reg_down =reg%>%
#     dplyr::filter(CHRO == this_chro & (TES <= this_pos & down_end >= this_pos))%>%
#     dplyr::mutate(reg_spec = "downstreamTES")%>%
#     dplyr::mutate(vcf_chro = this_chro,
#                   vcf_pos = this_pos)
#
#   fil_reg = rbind(fil_reg_up, fil_reg_down)%>%
#     dplyr::select(vcf_chro, vcf_pos, everything())
#
#   ##### parse this portion only
#   if(nrow(fil_reg)>0)
#   {
#
#
#     return(fil_reg)
#
#
#   }
#
#
#
# }))
#
#
#
################################
cl <- makeCluster(detectCores()-2)
registerDoParallel(cl)
#vcf_test = vcf[1:10000,]
#tt = Sys.time()
vcf_mapped_reg = rbindlist(foreach(x= 1:nrow(vcf), .packages = "dplyr")%dopar% match_reg(x,vcf,reg))
#et = Sys.time()
#### here match_gtf is taken as an object rather than a function, so need to define within the environment
stopCluster(cl)
###############################
vcf_mapped_reg = vcf_mapped_reg%>%
dplyr::mutate(reg_info = paste(CHRO, STRAND,gene_name, up_start, TSS, TES, down_end,reg_spec, sep = "_"))%>%
unique()%>%
dplyr::filter(nchar(reg_info)>7)
write.table(vcf_mapped_reg, vcfMapped_reg_outputName,
quote = F, row.names = F, sep  = "\t")
vcf_mapped_reg_counts = vcf_mapped_reg%>%
dplyr::select(reg_info,CHRO, STRAND, gene_name, gene_id, TSS, TES, up_start, down_end, reg_spec)%>%
dplyr::group_by(reg_info)%>%
dplyr::mutate(count = n())%>%
unique()
write.table(vcf_mapped_reg_counts, vcfMapped_regCount_outputName,
quote = F, row.names = F, sep  = "\t")
return(vcf_mapped_reg_counts)
}
gpd_workflow = function(vcf_folderPath,
mapping_vcf_to,
mapTo_fileName,
gtf_fileName,
reg_fileName,
ud_fileName,
output_folderPath,
output_tag
)
{
#
vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/"
# mapping_vcf_to = "protUnits"
# mapTo_fileName = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/protGenoMapped.tsv"
# gtf_fileName = NULL
# reg_fileName = NULL
# ud_fileName = NULL
# output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210724/"
# output_tag = "test0728_protUnits"
#
files = list.files(vcf_folderPath)
filenames = paste(vcf_folderPath, files, sep = "")
map_result = NULL
##################################################################
######################################################### MAP TO PROTEIN UNITS
##################################################################
if(mapping_vcf_to == "protUnits")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
genoMapped = T,
protMappedGeno_file = mapTo_fileName,
protUnit_file= NULL,
protMappedGeno_outputName = NULL,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else
{
##################################################################
######################################################### MAP TO GTF file
##################################################################
if(mapping_vcf_to == "GTF")
{
gtf_df = fread(gtf_fileName, stringsAsFactors = F, data.table = F)
#### a series of operations
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"))
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x])))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"))
return(mat_df)
}
mat = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "regulatory",
mapTo_fileName = NULL,
gtf_fileName = NULL,
reg_fileName = "/Users/Ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/gtf_border_region1000.tsv",
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210724/",
output_tag = "test0728_reg")
mat
dim(mat)
mat[1,1:5]
library(devtools)
library(roxygen2)
setwd("/Users/ginny/Google Drive/GPD_allMapping")
create("GPD_allMapping")
setwd("/Users/ginny/Google Drive/GPDall")
create("GPDall")
setwd("/Users/ginny/Google Drive/GPDall/GPDall")
document()
m(list = c("defineRegion_UTR", "gpd_workflow", "mapVCFtoGTF", "mapVCFtoProtUnits", "mapVCFtoReg", "mapVCFtoUD", "patientInfo_extract"))
rm(list = c("defineRegion_UTR", "gpd_workflow", "mapVCFtoGTF", "mapVCFtoProtUnits", "mapVCFtoReg", "mapVCFtoUD", "patientInfo_extract"))
document()
document()
library(devtools)
install_github("ginnyintifa/GPDall")
document()
install_github("ginnyintifa/GPDall")
library(GPDall)
gpd_workflow()
gpd_workflow
