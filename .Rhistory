dplyr::filter(CHRO == this_chro & (TES <= this_pos & down_end >= this_pos))%>%
dplyr::mutate(reg_spec = "downstreamTES")%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
fil_reg = rbind(fil_reg_up, fil_reg_down)%>%
dplyr::select(vcf_chro, vcf_pos, everything())
##### parse this portion only
if(nrow(fil_reg)>0)
{
fil_reg = fil_reg
}else{
fil_reg = data.frame(vcf_chro = this_chro,
vcf_pos = this_pos,
gene_name = "",
gene_id = "",
CHRO = "",
STRAND = "",
TSS = "",
TES = "",
up_start = "",
down_end = "",
reg_spec = "",
stringsAsFactors = F)
}
return(fil_reg)
}
cl <- makeCluster(detectCores()-2)
registerDoParallel(cl)
vcf_mapped_reg = rbindlist(foreach(x= 1:nrow(vcf), .packages = "dplyr")%dopar% match_reg(x,vcf,reg))
stopCluster(cl)
###############################
vcf_mapped_reg = vcf_mapped_reg%>%
dplyr::mutate(reg_info = paste(CHRO, STRAND,gene_name, up_start, TSS, TES, down_end,reg_spec, sep = "_"))%>%
unique()%>%
dplyr::filter(nchar(reg_info)>7)
write.table(vcf_mapped_reg, vcfMapped_reg_outputName,
quote = F, row.names = F, sep  = "\t")
vcf_mapped_reg_counts = vcf_mapped_reg%>%
dplyr::select(reg_info,CHRO, STRAND, gene_name, gene_id, TSS, TES, up_start, down_end, reg_spec)%>%
dplyr::group_by(reg_info)%>%
dplyr::mutate(count = n())%>%
unique()
write.table(vcf_mapped_reg_counts, vcfMapped_regCount_outputName,
quote = F, row.names = F, sep  = "\t")
return(vcf_mapped_reg_counts)
}
mapVCFtoUD = function(vcf_file,
ud_file,
vcfMapped_ud_outputName,
vcfMapped_udCount_outputName)
{
vcf = fread(vcf_file, skip = "#CHROM",
stringsAsFactors = F, data.table = F)
colnames(vcf) = gsub("#","",colnames(vcf))
ud =  fread(ud_file,
stringsAsFactors = F, data.table = F)
d_ud = rbindlist(lapply(1:nrow(vcf), function(x) {
this_chro = vcf$CHROM[x]
this_pos = vcf$POS[x]
fil_ud =ud%>%
dplyr::filter(CHRO == this_chro & (start <= this_pos & end >= this_pos))%>%
dplyr::mutate(vcf_chro = this_chro,
vcf_pos = this_pos)
if(nrow(fil_ud)>0)
{
return(fil_ud)
}
}))
if(nrow(d_ud)>0)
{
vcf_mapped_ud = d_ud%>%
dplyr::mutate(ud_info = paste(CHRO, STRAND,gene_name,start, end, sep = "_"))%>%
unique()
write.table(vcf_mapped_ud, vcfMapped_ud_outputName,
quote = F, row.names = F, sep  = "\t")
vcf_mapped_ud_counts = vcf_mapped_ud%>%
dplyr::select(ud_info,CHRO, STRAND, gene_name, gene_id, start, end)%>%
dplyr::group_by(ud_info)%>%
dplyr::mutate(count = n())%>%
unique()
write.table(vcf_mapped_ud_counts, vcfMapped_udCount_outputName,
quote = F, row.names = F, sep  = "\t")
}
return(vcf_mapped_ud_counts)
}
patientInfo_extract =function(vcf_file){
f = readLines(vcf_file)
f_tf = grepl("##TUMOR", f)
if(sum(f_tf)==1)
{
f_t = grep("##TUMOR", f, value = T)
f_t_split = unlist(strsplit(f_t, split = ","))
b = unlist(strsplit(f_t_split[1],split = "Sample="))[2]
}else{
sn = unlist(strsplit(vcf_file, split = "/"))
sl = length(sn)
tag = unlist(strsplit(sn[sl],split = "-"))[1]
b = paste0("nonSample",tag)
}
return(b)
}
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
protMappedGeno_file = mapTo_fileName,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
map_result
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"),
quote = F, row.names = F, sep = "\t")
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
nrow(map_result)
gpd_workflow = function(vcf_folderPath,
mapping_vcf_to,
mapTo_fileName,
gtf_df,
reg_fileName,
ud_fileName,
output_folderPath,
output_tag
)
{
# vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/"
# mapping_vcf_to = "protUnits"
# mapTo_fileName = "/Users/ginny/Desktop/mapped_protUnits.tsv"
# gtf_df = parse_gtf
# reg_fileName = NULL
# ud_fileName = NULL
# output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/"
# output_tag = "test_protUnits_sampleMapped"
files = list.files(vcf_folderPath)
filenames = paste(vcf_folderPath, files, sep = "")
map_result = NULL
##################################################################
######################################################### MAP TO PROTEIN UNITS
##################################################################
if(mapping_vcf_to == "protUnits")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
protMappedGeno_file = mapTo_fileName,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else
{
##################################################################
######################################################### MAP TO GTF file
##################################################################
if(mapping_vcf_to == "GTF")
{
gtf_df = gtf_df
#### a series of operations
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"),
quote = F, row.names = F, sep = "\t")
if(nrow(map_result)>0)
{
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x])))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"),
quote = F, row.names = F, sep = "\t")
return(mat_df)
}
}
mat1 = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Desktop/mapped_protUnits.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/",
output_tag = "test_protUnits_sampleMapped")
gpd_workflow = function(vcf_folderPath,
mapping_vcf_to,
mapTo_fileName,
gtf_df,
reg_fileName,
ud_fileName,
output_folderPath,
output_tag
)
{
# vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/"
# mapping_vcf_to = "protUnits"
# mapTo_fileName = "/Users/ginny/Desktop/mapped_protUnits.tsv"
# gtf_df = parse_gtf
# reg_fileName = NULL
# ud_fileName = NULL
# output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/"
# output_tag = "test_protUnits_sampleMapped"
files = list.files(vcf_folderPath)
filenames = paste(vcf_folderPath, files, sep = "")
map_result = NULL
##################################################################
######################################################### MAP TO PROTEIN UNITS
##################################################################
if(mapping_vcf_to == "protUnits")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoProtUnits (vcf_file = filenames[x],
protMappedGeno_file = mapTo_fileName,
vcfMapped_prot_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProt.tsv"),
vcfMapped_protUnitCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToProtCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else
{
##################################################################
######################################################### MAP TO GTF file
##################################################################
if(mapping_vcf_to == "GTF")
{
gtf_df = gtf_df
#### a series of operations
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
tt = Sys.time()
matched = mapVCFtoGTF(vcf_file = filenames[x],
gtf = gtf_df,
vcfMapped_gtf_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF.tsv"),
vcfMapped_gtfCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount.tsv"),
vcfMapped_gtf_nonTranslated_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTF_nonTranslated.tsv"),
vcfMapped_gtf_nonTranslatedCount_outputName =  paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToGTFCount_nonTranslated.tsv"))
et = Sys.time()
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO REGULATORY REGIONS
##################################################################
if(mapping_vcf_to == "regulatory")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoReg(vcf_file = filenames[x],
reg_file = reg_fileName,
vcfMapped_reg_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToReg.tsv"),
vcfMapped_regCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToRegCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}), use.names = T)
}else{
##################################################################
######################################################### MAP TO USER DEFINED REGIONS
##################################################################
if(mapping_vcf_to == "userDefine")
{
map_result = rbindlist(lapply(1:length(filenames), function(x) {
cat(x, "\n")
pb = patientInfo_extract(filenames[x])
matched = mapVCFtoUD(vcf_file = filenames[x],   #### can be parallelized too, advance this later
ud_file = ud_fileName,
vcfMapped_ud_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUD.tsv"),
vcfMapped_udCount_outputName = paste0(output_folderPath, output_tag,"_",
pb,"_", "mapToUDCount.tsv"))
if(is.null(matched)==F)
{
m_r = matched%>%
dplyr::mutate(barcode = pb)
return(m_r)
}
}),use.names = T)
}else{
cat( "wrong mapping type")
}
}
}
}
######### before the final return need to make it a matrix
write.table(map_result, paste0(output_folderPath, output_tag,"_", "allMappedCount.tsv"),
quote = F, row.names = F, sep = "\t")
if(nrow(map_result)>0)
{
#### I require what ever the type is the first column contains the unit info
colnames(map_result)[1] = "unit_info"
unique_units = unique(map_result$unit_info)
patients = unlist(lapply(1:length(filenames), function(x) patientInfo_extract(filenames[x])))
mat = matrix(0,length(unique_units), length(patients))
for(i in 1:ncol(mat))
{
this_p = patients[i]
sli = map_result%>%
dplyr::filter(barcode == this_p)
ur = match(sli$unit_info, unique_units)
mat[ur,i] = sli$count
}
rs = rowSums(mat)
mat_df = data.frame(unique_units, mat, rs,stringsAsFactors = F)
colnames(mat_df) = c("unit_info", patients,"sum")
mat_df = mat_df%>%
dplyr::arrange(desc(sum))
write.table(mat_df, paste0(output_folderPath, output_tag,"_", "countMatrix.tsv"),
quote = F, row.names = F, sep = "\t")
return(mat_df)
}else{
cat("No variants mapped.","\n")
}
}
mat1 = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Desktop/mapped_protUnits.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/",
output_tag = "test_protUnits_sampleMapped")
detach("package:GPDall", unload=TRUE)
remove.packages("GPDall")
install_github("ginnyintifa/GPDall")
library(GPDall)
mat1 = gpd_workflow(vcf_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/vcf_folder_20210621/",
mapping_vcf_to = "protUnits",
mapTo_fileName = "/Users/ginny/Desktop/mapped_protUnits.tsv",
gtf_df = parse_gtf,
reg_fileName = NULL,
ud_fileName = NULL,
output_folderPath = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/",
output_tag = "test_protUnits_sampleMapped")
GPDall::parse_gtf %>%head()
protUnit_example
gl = c("ZNF711", "MY09B","ABCC6","KRAS","NRAS","CDK1","CDK2","PAK1")
gb = gtf_border(gtf_df = parse_gtf,
geneList = gl ,
geneBorder_filename = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/geneBorders.tsv")
gb = get_geneborder(gtf_df = parse_gtf,
geneList = gl ,
geneBorder_filename = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/geneBorders.tsv")
defineRegion_UTR(up5UTR_bp = 1000, ### how many base pair upstream of 5' UTR, default to 1000
down3UTR_bp = 1000, #### how many base pair downstream of 3' UTR, default to 1000
gtf_border = gb,
regUnit_filename = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/regRegion.tsv")
up5UTR_bp = 1000
down3UTR_bp = 1000
gtf_border = gb
all_chros = unique(gtf_border$CHRO)
all_chros
gb
get_geneborder = function(gtf_df,
geneList,
geneBorder_filename)
{
real_genes = gtf_df%>%
dplyr::filter(transcript_type == "protein_coding", gene_name %in% geneList)
gene_sets = unique(real_genes$gene_name)
gene_border = rbindlist(lapply(1:length(gene_sets), function(x) {
get_gene = gtf_df%>%
dplyr::filter(gene_name == gene_sets[x])
tss = min(get_gene$START)
tes = max(get_gene$END)
df = data.frame(gene_name = gene_sets[x],gene_id = get_gene$gene_id[1],
CHRO = get_gene$CHRO[1], STRAND = get_gene$STRAND[1],
TSS = tss, TES = tes, stringsAsFactors = F)
return(df)
}))
gene_border = gene_border%>%
dplyr::arrange(CHRO, TSS)
write.table(gene_border, geneBorder_filename,
quote = F, row.names = F, sep = "\t")
return(gene_border)
}
gb = get_geneborder(gtf_df = parse_gtf,
geneList = gl ,
geneBorder_filename = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/geneBorders.tsv")
gb
defineRegion_UTR(up5UTR_bp = 1000, ### how many base pair upstream of 5' UTR, default to 1000
down3UTR_bp = 1000, #### how many base pair downstream of 3' UTR, default to 1000
gtf_border = gb,
regUnit_filename = "/Users/ginny/Google Drive/R_GPD/GPD_package_0401/modiInput_202104/test_vcf_20210906/regRegion.tsv")
document()
rm(get_protGeno)
rm(defineRegion_UTR())
rm(defineRegion_UTR
)
rm(get_geneborder)
document()
